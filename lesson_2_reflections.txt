To create a new local repository:
	git init

Then add the desired files to the staging area:
	git add file1.txt
	
Then commit the added files to the repository:
	git commit

	
What happens when you initialize a repository? Why do you need to do it?
  - Git creates a .git directory in your current directory.
  - Git does NOT make any commits automatically at this point.
  If you do "git status" it shows all the files that exist there as "Untracked".
  You would need to "git add .." and "git commit" the files you want to put under version control.

  
How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is a group of files identified to be ready to commit.
	Files can be added to this group, until you have all the files you want in the next commit.
	That allows that single commit to apply to all the files in that logical group.
	This lets the author group all the changes for a single feature change reside in the same commit.  
	This makes it possible for a logical grouping of many changes.
	
git diff 					==> diff working directory 	 vs  staging area 
git diff --staged 			==> diff staging area 		 vs  repository most recent commit
git diff commit1 commit2 	==> diff reposistory commit1 vs  repository commit2

BRANCHES:
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	There are lots of cases where branches would be helpful.  
	A good example would be: 
	Experimental features before ready for merging.


How do the diagrams help you visualize the branch structure?
	It turns out that commits don't know about branches.  
	A commit only keeps a reference to its parent commit.  
	This helps us understand the concept of "reachability". 
	That is, from a given commit, you can trace only toward 
	the root, not to arbitrary branch commits.
	
git branch     					== shows current (local) branchs	
git checkout somebranchname 	== attempts to checkout the local branch of that name, 
								or if not existing, creates a local branch with that name 
								to track a remote branch of that name.
							BUT if a FILE/folder of that name exists (locally), 
							THEN it will checkout that file instead of the branch!!
LESSON:  Avoid creating BRANCH names that could collide with FILE/folder names!							
LESSON:  Avoid creating files/folders with names that could collide with BRANCH names!							


If you check out a commit that is not at the head of a branch, 
  then you are in detached HEAD mode. 
  If you make changes there and want to keep them, 
  you need to create a branch there like this:
	git checkout -b mynew_branchname